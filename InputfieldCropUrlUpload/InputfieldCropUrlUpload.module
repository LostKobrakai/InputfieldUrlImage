<?php
class InputfieldCropUrlUpload extends InputfieldCropImage {
	public static function getModuleInfo() {
		return array(
			'title' => 'Image upload via URL', 
			'version' => 001, 
			'summary' => 'Add a URL field to add images from the web.'
			);
	}

	public function init() {
		parent::init();
	}

	public function ___render() {
		$this->config->scripts->add($this->config->urls->InputfieldUrlUpload . "InputfieldUrlUpload.js");
		$this->config->styles->add($this->config->urls->InputfieldUrlUpload . "InputfieldUrlUpload.css");
		return parent::___render();
	}

	protected function ___renderUpload($value) {
		// enables user to choose more than one file
		if($this->maxFiles != 1) $this->setAttribute('multiple', 'multiple'); 

		$attrs = $this->getAttributes();
		unset($attrs['value']); 
		if(substr($attrs['name'], -1) != ']') $attrs['name'] .= '[]';

		$extensions = $this->extensions; 
		if($this->unzip && !$this->maxFiles) $extensions .= ' zip';

		$out =	"\n<p data-maxfilesize='{$this->maxFilesize}' data-extensions='{$extensions}' data-fieldname='$attrs[name]' class='InputfieldFileUpload'>" . 
			"\n\t<input type='hidden' class='InputfieldFileMaxFiles' value='{$this->maxFiles}' />" . 
			"\n\t<input " . $this->getAttributesString($attrs) . " />" .
			"\n\t<input type='url' placeholder='" . __("Upload from Url") ."' class='FieldtypeImage' id='Inputfield_url_images' name='image_url' />" .
			"\n\t<span class='InputfieldFileValidExtensions detail'>" . htmlspecialchars(str_replace(' ', ', ', trim($extensions))) . "</span>" . 
			"\n\t<span class='AjaxUploadDropHere description'><i class='fa fa-upload'></i>&nbsp; " . $this->_('drag and drop files in here') . "</span>" . // Ajax upload instruction
			"\n</p>";

		return $out;
	}

		public function ___processInput(WireInputData $input) {
		if(is_null($this->value)) $this->value = new Pagefiles($this->fuel('page')); 
		if(!$this->destinationPath) $this->destinationPath = $this->value->path();
		if(!$this->destinationPath || !is_dir($this->destinationPath)) return $this->error($this->_("destinationPath is empty or does not exist")); 
		if(!is_writable($this->destinationPath)) return $this->error($this->_("destinationPath is not writable")); 

		$changed = false; 
		$total = count($this->value); 

		if($this->maxFiles <= 1 || $total < $this->maxFiles) { 
			if(wire('input')->post->image_url){
				$url = wire('sanitizer')->url(wire('input')->post->image_url);

				if(@is_array(@getimagesize($url))){
					$this->value->add($url);
				} else {
					$this->message($this->_("No image found."));
					$this->ajaxResponse(true, $this->_("No image found.")); 
				}

			} else {
				$ul = new WireUpload($this->attr('name')); 
				$ul->setDestinationPath($this->destinationPath); 
				$ul->setOverwrite($this->overwrite); 
				$ul->setAllowAjax(true);

				if($this->maxFiles == 1) {
					$ul->setMaxFiles(1); 

				} else if($this->maxFiles) {
					$maxFiles = $this->maxFiles - $total; 
					$ul->setMaxFiles($maxFiles); 

				} else if($this->unzip) { 
					$ul->setExtractArchives(true); 
				}

				$ul->setValidExtensions(explode(' ', trim($this->extensions))); 

				foreach($ul->execute() as $filename) {
					$this->processInputAddFile($filename); 
					$changed = true; 
				}

				if($this->config->ajax) foreach($ul->getErrors() as $error) { 
					$this->ajaxResponse(true, $error); 
				}	
			}
		} else if($this->maxFiles) {
			// over the limit
			$this->ajaxResponse(true, $this->_("Max file upload limit reached")); 
		}

		$n = 0; 

		foreach($this->value as $pagefile) {
			if($this->processInputFile($input, $pagefile, $n)) $changed = true; 
			$n++; 
		}

		if($changed) {
			$this->value->sort('sort'); 
			$this->trackChange('value'); 
		}

		if(count($this->ajaxResponses) && $this->config->ajax) {
			echo json_encode($this->ajaxResponses); 
		}

		return $this; 
	}

	public function install(){
		parent::___install();
		
		$this->modules->get('FieldtypeCropImage');
	}
}